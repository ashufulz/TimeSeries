# -*- coding: utf-8 -*-
"""ARIMA_SeasonalARIMA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1buLqKz_CgrDSaGR1n7DPXjrzkXjq5c5u

# ARIMA and Seasonal ARIMA
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

import numpy as np
import pandas as pd

# from google.colab import drive
# drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/DataScience/Dataset/TimeSeries/perrin-freres-monthly-champagne-.csv')

df.head()

df.tail()

# Cleaning up data
df.columns=['Month', 'Sales']

df.tail()

df.drop(106, axis=0, inplace=True)

df.drop(105, axis=0, inplace=True)

df.tail()

# Converting Month column into Datetime type
df['Month'] = pd.to_datetime(df['Month'])

df.set_index('Month', inplace=True)

df.head()

df.describe()

df.info()

"""## Visualize the data"""

df.plot(figsize=(16, 6))

# Testing for Stationarity
from statsmodels.tsa.stattools import adfuller

test_result = adfuller(df['Sales'])
test_result

# H0: It is non-stationary
# H1: It is stationary

def adfuller_test(sales):
  result = adfuller(sales)

  labels = ['ADF Test Statistic', 'p-value', '# lags used', '# observations used']

  for value, label in zip(result, labels):
    print(label + ':' + str(value))

  if result[1] <= 0.05:
    print('Rejecting Null-Hypothesis. Data is stationary')
  else:
    print('Weak evidence against Null-Hypothesis. Data is non-stationary')

adfuller_test(df['Sales'])

"""# DIFFERENCE
#### As the data is having seasonal pattern, we will shift by 12 months and see the difference
"""

df['Seasonal First Difference'] = df['Sales'] - df['Sales'].shift(12)

df.head(15)

# Again testing by Dickey-Fuller test
adfuller_test(df['Seasonal First Difference'].dropna())

df['Seasonal First Difference'].plot(figsize=(16, 6))

"""# AUTO-REGRESSIVE MODEL"""

from pandas.plotting import autocorrelation_plot

autocorrelation_plot(df['Sales'])

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

import statsmodels.api as sm

fig = plt.figure(figsize=(16, 6))
ax1 = fig.add_subplot(211)
fig = sm.graphics.tsa.plot_acf(df['Seasonal First Difference'].iloc[13:], lags=40, ax=ax1)
ax2 = fig.add_subplot(212)
fig = sm.graphics.tsa.plot_pacf(df['Seasonal First Difference'].iloc[13:], lags=40, ax=ax2)

# For non-seasonal data
# p=1, d=1, q=0/1
from statsmodels.tsa.arima.model import ARIMA

model = ARIMA(df['Sales'], order=(1, 1, 1))
model_fit = model.fit()

model_fit.summary()

df['Forecast'] = model_fit.predict(start=90, end=103, dynamic=True)
df[['Sales', 'Forecast']].plot(figsize=(16, 6))

mod = sm.tsa.statespace.SARIMAX(df['Sales'], order=(1, 1, 1), seasonal_order=(1,1,1,12))
res = mod.fit()

df['Forecast'] = res.predict(start=90, end=103, dynamic=True)
df[['Sales', 'Forecast']].plot(figsize=(16, 6))

"""# FORECASTING THE FUTURE"""

from pandas.tseries.offsets import DateOffset

future_dates = [df.index[-1] + DateOffset(months=x) for x in range(0, 24)]

future_df = pd.DataFrame(index=future_dates[1:], columns=df.columns)

future_df.tail()

future_df = pd.concat([df, future_df])

future_df['Forecast'] = res.predict(start=104, end=120, dynamic=True)
future_df[['Sales', 'Forecast']].plot(figsize=(20, 6))

future_df['Forecast']



